// Generated by CoffeeScript 1.4.0
(function() {
  var $, aliveNeighbors, coffeeLife, deadOrAlive, drawCell, drawGrid, drawLoop, initGraph, initGrid, neighborStatus, nextGeneration,
    _this = this;

  $ = jQuery;

  initGrid = function(w, h) {
    var height, indexRow, status, _i, _ref, _results;
    status = ["dead", "alive"];
    window.grid = new Object();
    window.grid.w = w - 1;
    window.grid.h = h - 1;
    _results = [];
    for (indexRow = _i = 0, _ref = w - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; indexRow = 0 <= _ref ? ++_i : --_i) {
      _results.push(window.grid[indexRow] = (function() {
        var _j, _ref1, _results1;
        _results1 = [];
        for (height = _j = 0, _ref1 = h - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; height = 0 <= _ref1 ? ++_j : --_j) {
          _results1.push(status[Math.floor(Math.random() + 0.1)]);
        }
        return _results1;
      })());
    }
    return _results;
  };

  neighborStatus = function(x, y, a, b) {
    if ((x === a && y === b) || a <= 0 || b <= 0 || b >= window.grid.h || a >= window.grid.w) {
      return "dead";
    } else {

    }
    return window.grid[a][b];
  };

  aliveNeighbors = function(x, y) {
    var a, b, number, _fn, _i, _j, _ref, _ref1, _ref2, _ref3,
      _this = this;
    number = 0;
    for (a = _i = _ref = x + 1, _ref1 = x - 1; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; a = _ref <= _ref1 ? ++_i : --_i) {
      _fn = function() {};
      for (b = _j = _ref2 = y - 1, _ref3 = y + 1; _ref2 <= _ref3 ? _j <= _ref3 : _j >= _ref3; b = _ref2 <= _ref3 ? ++_j : --_j) {
        _fn();
        if (neighborStatus(x, y, a, b) === "alive") {
          number += 1;
        } else {
          number += 0;
        }
      }
    }
    return number;
  };

  deadOrAlive = function(x, y) {
    var number;
    number = aliveNeighbors(x, y);
    if (window.grid[x][y] === "alive") {
      if (number < 2 || number > 3) {
        return "dead";
      } else {
        return "alive";
      }
    } else {
      if (number === 3) {
        return "alive";
      } else {
        return "dead";
      }
    }
  };

  nextGeneration = function() {
    var newGrid, x, y, _fn, _i, _j, _ref, _ref1,
      _this = this;
    newGrid = window.grid;
    for (x = _i = 0, _ref = grid.w; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
      _fn = function() {};
      for (y = _j = 0, _ref1 = grid.h; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
        _fn();
        newGrid[x][y] = deadOrAlive(x, y);
      }
    }
    return window.grid = newGrid;
  };

  initGraph = function(w, h) {
    $("#life").html("<canvas id=\"lifeCanvas\" width=\"" + (w * 10) + "\" height=\"" + (h * 10) + "\" > come on life ! </canvas>");
    window.contexte = document.getElementById('lifeCanvas').getContext('2d');
    window.contexte.fillStyle = "rgba(12,12,12,1)";
    return window.contexte.fillRect(0, 0, w * 16, h * 16);
  };

  drawCell = function(x, y) {
    if (window.grid[x][y] === "alive") {
      window.contexte.fillStyle = "rgba(255,255,255,1)";
      return window.contexte.fillRect(x * 10, y * 10, 10, 10);
    } else {
      window.contexte.fillStyle = "rgba(0,0,0,1)";
      return window.contexte.fillRect(x * 10, y * 10, 10, 10);
    }
  };

  drawGrid = function() {
    var x, y, _i, _ref, _results;
    _results = [];
    for (x = _i = 0, _ref = grid.w; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
      _results.push((function() {
        var _fn, _j, _ref1, _results1,
          _this = this;
        _fn = function() {};
        _results1 = [];
        for (y = _j = 0, _ref1 = grid.h; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          _fn();
          _results1.push(drawCell(x, y));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  drawLoop = function() {
    drawGrid();
    nextGeneration();
    return setTimeout(drawLoop, 100);
  };

  coffeeLife = function(width, height) {
    initGrid(width, height);
    initGraph(width, height);
    return drawLoop();
  };

}).call(this);
