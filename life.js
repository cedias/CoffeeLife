// Generated by CoffeeScript 1.4.0
(function() {
  var $, aliveNeighbors, deadOrAlive, drawCell, drawGrid, drawLoop, graphInit, height, initGrid, isNeighborDead, nextGeneration, status, width,
    _this = this;

  $ = jQuery;

  initGrid = function(w, h) {
    var height, indexRow, _i, _results;
    window.grid = new Object();
    window.grid.w = w;
    window.grid.h = h;
    _results = [];
    for (indexRow = _i = 1; 1 <= w ? _i <= w : _i >= w; indexRow = 1 <= w ? ++_i : --_i) {
      _results.push(window.grid[indexRow] = (function() {
        var _j, _results1;
        _results1 = [];
        for (height = _j = 1; 1 <= h ? _j <= h : _j >= h; height = 1 <= h ? ++_j : --_j) {
          _results1.push(status[Math.floor(Math.random() + 0.1)]);
        }
        return _results1;
      })());
    }
    return _results;
  };

  isNeighborDead = function(cell, x, y) {
    var grid;
    grid = window.grid;
    if (cell.x === x && cell.y === y) {
      true;
    }
    if (x < 1) {
      x = grid.h;
    }
    if (y < 1) {
      y = grid.w;
    }
    if (y >= grid.w) {
      y = 1;
    }
    if (x >= grid.h) {
      x = 1;
    }
    return grid[x][y] === "dead";
  };

  aliveNeighbors = function(x, y) {
    var a, b, cell, number, _fn, _i, _j, _ref, _ref1, _ref2, _ref3,
      _this = this;
    number = 0;
    cell = new Object();
    cell.x = x;
    cell.y = y;
    for (a = _i = _ref = x - 1, _ref1 = x + 1; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; a = _ref <= _ref1 ? ++_i : --_i) {
      _fn = function() {};
      for (b = _j = _ref2 = y - 1, _ref3 = y + 1; _ref2 <= _ref3 ? _j <= _ref3 : _j >= _ref3; b = _ref2 <= _ref3 ? ++_j : --_j) {
        _fn();
        if (!isNeighborDead(cell, a, b)) {
          number += 1;
        }
      }
    }
    return number;
  };

  deadOrAlive = function(x, y) {
    var grid, number;
    grid = window.grid;
    number = aliveNeighbors(x, y);
    if (grid[x][y] === "alive") {
      if (number < 2 || number > 3) {
        return "dead";
      } else {
        return "alive";
      }
    } else {
      if (number === 3) {
        return "alive";
      } else {
        return "dead";
      }
    }
  };

  nextGeneration = function() {
    var grid, newGrid, x, y, _fn, _i, _j, _ref, _ref1,
      _this = this;
    newGrid = window.grid;
    grid = window.grid;
    console.log(grid.w);
    for (x = _i = 1, _ref = grid.w; 1 <= _ref ? _i <= _ref : _i >= _ref; x = 1 <= _ref ? ++_i : --_i) {
      _fn = function() {};
      for (y = _j = 1, _ref1 = grid.h; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 1 <= _ref1 ? ++_j : --_j) {
        _fn();
        newGrid[x][y] = deadOrAlive(x, y);
      }
    }
    window.grid = newGrid;
    return console.log(newGrid);
  };

  graphInit = function() {
    var contexte;
    $("#life").html("<canvas id=\"lifeCanvas\" width=\"800\" height=\"800\" > come on life ! </canvas>");
    contexte = document.getElementById('lifeCanvas').getContext('2d');
    contexte.fillStyle = "rgba(0,0,0,1)";
    contexte.fillRect(0, 0, 802, 802);
    return contexte;
  };

  drawCell = function(contexte, grid, cell) {
    var column, row;
    column = cell % 800;
    row = (cell - column) / 800;
    if (grid[cell] === "alive") {
      contexte.fillStyle = "rgba(255,255,255,1)";
      return contexte.fillRect(column * 16 + 1, 1 + row * 16, 16, 16);
    } else {
      contexte.fillStyle = "rgba(0,0,0,1)";
      return contexte.fillRect(column * 16 + 1, 1 + row * 16, 16, 16);
    }
  };

  drawGrid = function(contexte, grid) {
    var cell, _i, _results;
    _results = [];
    for (cell = _i = gridSize; gridSize <= 0 ? _i <= 0 : _i >= 0; cell = gridSize <= 0 ? ++_i : --_i) {
      _results.push(drawCell(contexte, grid, cell));
    }
    return _results;
  };

  drawLoop = function() {
    drawGrid(contexte, grid);
    window.grid = nextGeneration(grid);
    alert(grid);
    return setTimeout(drawLoop, 500);
  };

  width = 200;

  height = 200;

  status = ["dead", "alive"];

  initGrid(width, height);

  console.log(window.grid);

  setInterval(nextGeneration, 1000);

}).call(this);
